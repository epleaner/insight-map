{"version":3,"file":"static/development/pages/index.js","sources":["webpack:///webpack/bootstrap","webpack:///./src/components/insightGraph/index.js","webpack:///./src/components/insightGraph/webSocketListener.js","webpack:///./src/pages/index.js","webpack:///external \"d3-force\"","webpack:///external \"d3-scale\"","webpack:///external \"d3-scale-chromatic\"","webpack:///external \"d3-selection\"","webpack:///external \"prop-types\"","webpack:///external \"react\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","import {\n  useRef,\n  useCallback,\n  useState,\n  useEffect,\n  useMemo,\n} from 'react';\nimport { scaleOrdinal } from 'd3-scale';\nimport { schemeTableau10 } from 'd3-scale-chromatic';\nimport { select } from 'd3-selection';\nimport {\n  forceSimulation,\n  forceManyBody,\n  forceLink,\n  forceCenter,\n  forceX,\n  forceY,\n} from 'd3-force';\n\nconst InsightGraph = ({ nodes }) => {\n  const radius = 8;\n  const maxHistory = 5;\n  const width = 600;\n  const height = 400;\n\n  const [showRecent, setShowRecent] = useState(false);\n  const toggleRecent = useCallback(() => setShowRecent((show) => !show), []);\n\n  const [inputHistory, setInputHistory] = useState([]);\n  const [chart, setChart] = useState();\n  const svgRef = useRef();\n\n  const [chartData, setChartData] = useState({\n    nodes: [],\n    links: [],\n  });\n\n  const color = useMemo(() => scaleOrdinal(schemeTableau10), []);\n\n  useEffect(() => {\n    const svg = select(svgRef.current)\n      .append('svg')\n      .style('width', '100vw')\n      .style('height', '100vh')\n      .attr('viewBox', [-width / 2, -height / 2, width, height]);\n\n    const simulation = forceSimulation()\n      .force('charge', forceManyBody().strength(-1000))\n      .force(\n        'link',\n        forceLink()\n          .id((d) => d.id)\n          .distance(100)\n      )\n      .force('center', forceCenter())\n      .force('x', forceX())\n      .force('y', forceY())\n      .on('tick', ticked);\n\n    let link = svg.append('g').attr('stroke', '#000').selectAll('line');\n\n    let circle = svg.append('g').selectAll('g');\n\n    function ticked() {\n      circle.attr('transform', (d) => `translate(${d.x}, ${d.y})`);\n\n      link\n        .attr('x1', (d) => d.source.x)\n        .attr('y1', (d) => d.source.y)\n        .attr('x2', (d) => d.target.x)\n        .attr('y2', (d) => d.target.y);\n    }\n\n    setChart(\n      Object.assign(select(svgRef.current).node(), {\n        update({ nodes, links }) {\n          // Make a shallow copy to protect against mutation, while\n          // recycling old nodes to preserve position and velocity.\n          const old = new Map(circle.data().map((d) => [d.id, d]));\n          nodes = nodes.map((d) => Object.assign(old.get(d.id) || {}, d));\n          links = links.map((d) => Object.assign({}, d));\n\n          circle = circle\n            .data(nodes, (d) => d.id)\n            .join('g')\n            .attr('data', (d) => d.data);\n\n          circle\n            .append('circle')\n            .attr('r', 8)\n            .attr('stroke', '#fff')\n            .attr('stroke-width', 1.5)\n            .attr('fill', (d) => color(d.id));\n\n          circle\n            .append('text')\n            .text((d) => d.id)\n            .attr('fill', (d) => color(d.id))\n            .attr('dy', radius * 3)\n            .attr('font-size', '1rem')\n            .attr('text-anchor', 'middle');\n\n          link = link\n            .data(links, (d) => [d.source, d.target])\n            .join('line')\n            .attr('opacity', (d) => 1 - d.weight / maxHistory);\n\n          simulation.nodes(nodes);\n          simulation.force('link').links(links);\n          simulation.alpha(1).restart();\n        },\n      })\n    );\n\n    return () => {\n      select(svg).remove();\n    };\n  }, [color]);\n\n  useEffect(() => {\n    if (chart) {\n      chart.update(chartData);\n    }\n  }, [chart, chartData.nodes.length, chartData.links.length]);\n\n  useEffect(() => {\n    if (nodes.length === 0) return;\n\n    const newWord = nodes[nodes.length - 1];\n\n    if (newWord.error) return;\n\n    console.log('in graph effect, new word:', newWord);\n\n    if (inputHistory.length === maxHistory) inputHistory.pop();\n\n    const newNode = { id: newWord.transcription, data: newWord };\n\n    setChartData((prevData) => {\n      let newData = { ...prevData };\n\n      const newWordAlreadyInGraph = prevData.nodes.some(\n        (e) => e.id === newNode.id\n      );\n\n      if (!newWordAlreadyInGraph) newData.nodes.push(newNode);\n\n      let updatedLinks = []; // keep track of which previous inputs have already been updated\n\n      inputHistory.forEach((prevInput, ndx) => {\n        if (\n          // don't need to update yourself\n          prevInput.id !== newNode.id &&\n          // only update links once\n          !updatedLinks.includes(prevInput.id)\n        ) {\n          // look through the links and update weight with average if we find a match\n          newData.links = newData.links.map((e) => {\n            if (\n              (e.source === prevInput.id && e.target === newNode.id) ||\n              (e.source === newNode.id && e.target === prevInput.id)\n            ) {\n              e.weight = (e.weight + ndx) / 2;\n              updatedLinks.push(prevInput.id);\n            }\n\n            return e;\n          });\n\n          // if we didn't update this link (meaning it didn't exist), create a link\n          if (!updatedLinks.includes(prevInput.id)) {\n            newData.links.push({\n              source: prevInput.id,\n              target: newNode.id,\n              weight: ndx,\n            });\n          }\n        }\n      });\n\n      return newData;\n    });\n\n    inputHistory.unshift(newNode);\n    setInputHistory(inputHistory);\n  }, [inputHistory, nodes.length]);\n\n  return (\n    <>\n      <div className='absolute m-2 text-gray-200'>\n        <label>\n          Show recent nodes\n          <input\n            className='mx-2'\n            type='checkbox'\n            value={showRecent}\n            onClick={toggleRecent}\n          />\n        </label>\n        {showRecent && (\n          <div>\n            <ul>\n              {inputHistory.map((i, ndx) => (\n                <li key={i.id + ndx}>{i.data.transcription}</li>\n              ))}\n            </ul>\n          </div>\n        )}\n      </div>\n      <main ref={svgRef}></main>\n    </>\n  );\n};\n\nexport default InsightGraph;\n","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nconst SOCKET_STATUS = {\n  '0': 'Attempting to connect...',\n  '1': 'Open',\n  '2': 'Closing',\n  '3': 'Closed',\n};\n\nconst WebSocketListener = ({ onMessage }) => {\n  const [socket, setSocket] = useState(null);\n  const [socketState, setSocketState] = useState('disconnected');\n\n  useEffect(() => {\n    const connectToWebSocket = () => {\n      // Create WebSocket connection.\n      const socket = new WebSocket('ws://localhost:5678');\n\n      socket.onopen = (event) => {\n        setSocketState('connected');\n      };\n\n      socket.onmessage = (event) => {\n        console.log('Message from server ', event.data);\n        onMessage(JSON.parse(event.data));\n      };\n\n      socket.onclose = (event) => {\n        console.log('Connection closed');\n        setSocketState('disconnected');\n        setTimeout(() => connectToWebSocket(), 1000);\n      };\n\n      socket.onerror = (error) => {\n        console.log('Error', error);\n        setSocketState('error');\n      };\n\n      setSocket(socket);\n    };\n\n    connectToWebSocket();\n\n    return () => socket && socket.close();\n  }, []);\n\n  return (\n    <div className='absolute right-0 m-2 text-gray-200'>\n      Socket:{' '}\n      <span\n        className={\n          socketState === 'connected' ? 'text-green-400' : 'text-red-400'\n        }>\n        {socket && SOCKET_STATUS[socket.readyState]}\n      </span>\n    </div>\n  );\n};\n\nWebSocketListener.propTypes = {\n  onMessage: PropTypes.func.isRequired,\n};\n\nexport default WebSocketListener;\n","import { useState, useCallback } from 'react';\n\nimport InsightGraph from '@components/insightGraph';\nimport WebSocketListener from '@components/insightGraph/webSocketListener';\n\nconst InsightGraphPage = () => {\n  const [nodes, setNodes] = useState([]);\n\n  const addNode = useCallback((newNode) => {\n    setNodes((prev) => {\n      const newState = [...prev];\n      newState.push(newNode);\n      return newState;\n    });\n  }, []);\n\n  return (\n    <>\n      <WebSocketListener onMessage={addNode} />\n      <InsightGraph nodes={nodes} />\n    </>\n  );\n};\n\nexport default InsightGraphPage;\n","module.exports = require(\"d3-force\");","module.exports = require(\"d3-scale\");","module.exports = require(\"d3-scale-chromatic\");","module.exports = require(\"d3-selection\");","module.exports = require(\"prop-types\");","module.exports = require(\"react\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxFA;AAOA;AACA;AACA;AACA;AACA;AAQA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AAMA;AAaA;AAEA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AAOA;AAQA;AAKA;AACA;AACA;AACA;AACA;AArCA;AAwCA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACtNA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AADA;AAIA;;;;;;;;;;;;;;;;;;;;AChEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACxBA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}