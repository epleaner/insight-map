{"ast":null,"code":"var _jsxFileName = \"/Users/epleaner/workspace/insight-map/src/components/insightGraph/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useRef, useCallback, useState, useEffect, useMemo } from 'react';\nimport { scaleOrdinal } from 'd3-scale';\nimport { schemeTableau10 } from 'd3-scale-chromatic';\nimport { select } from 'd3-selection';\nimport { forceSimulation, forceManyBody, forceLink, forceCenter, forceX, forceY } from 'd3-force';\n\nconst InsightGraph = ({\n  nodes\n}) => {\n  const radius = 8;\n  const maxHistory = 5;\n  const width = 600;\n  const height = 400;\n  const {\n    0: showRecent,\n    1: setShowRecent\n  } = useState(false);\n  const toggleRecent = useCallback(() => setShowRecent(show => !show), []);\n  const {\n    0: inputHistory,\n    1: setInputHistory\n  } = useState([]);\n  const {\n    0: chart,\n    1: setChart\n  } = useState();\n  const svgRef = useRef();\n  const {\n    0: chartData,\n    1: setChartData\n  } = useState({\n    nodes: [],\n    links: []\n  });\n  const color = useMemo(() => scaleOrdinal(schemeTableau10), []);\n  useEffect(() => {\n    const svg = select(svgRef.current).append('svg').style('width', '100vw').style('height', '100vh').attr('viewBox', [-width / 2, -height / 2, width, height]);\n    const simulation = forceSimulation().force('charge', forceManyBody().strength(-1000)).force('link', forceLink().id(d => d.id).distance(100)).force('center', forceCenter()).force('x', forceX()).force('y', forceY()).on('tick', ticked);\n    let link = svg.append('g').attr('stroke', '#000').selectAll('line');\n    let circle = svg.append('g').selectAll('g');\n\n    function ticked() {\n      circle.attr('transform', d => `translate(${d.x}, ${d.y})`);\n      link.attr('x1', d => d.source.x).attr('y1', d => d.source.y).attr('x2', d => d.target.x).attr('y2', d => d.target.y);\n    }\n\n    setChart(Object.assign(select(svgRef.current).node(), {\n      update({\n        nodes,\n        links\n      }) {\n        // Make a shallow copy to protect against mutation, while\n        // recycling old nodes to preserve position and velocity.\n        const old = new Map(circle.data().map(d => [d.id, d]));\n        nodes = nodes.map(d => Object.assign(old.get(d.id) || {}, d));\n        links = links.map(d => Object.assign({}, d));\n        circle = circle.data(nodes, d => d.id).join('g').attr('data', d => d.data);\n        circle.append('circle').attr('r', 8).attr('stroke', '#fff').attr('stroke-width', 1.5).attr('fill', d => color(d.id));\n        circle.append('text').text(d => d.id).attr('fill', d => color(d.id)).attr('dy', radius * 3).attr('font-size', '1rem').attr('text-anchor', 'middle');\n        link = link.data(links, d => [d.source, d.target]).join('line').attr('opacity', d => 1 - d.weight / maxHistory);\n        simulation.nodes(nodes);\n        simulation.force('link').links(links);\n        simulation.alpha(1).restart();\n      }\n\n    }));\n    return () => {\n      select(svg).remove();\n    };\n  }, [color]);\n  useEffect(() => {\n    if (chart) {\n      chart.update(chartData);\n    }\n  }, [chart, chartData.nodes.length, chartData.links.length]);\n  useEffect(() => {\n    if (nodes.length === 0) return;\n    const newWord = nodes[nodes.length - 1];\n    if (newWord.error) return;\n    console.log('in graph effect, new word:', newWord);\n    if (inputHistory.length === maxHistory) inputHistory.pop();\n    const newNode = {\n      id: newWord.transcription,\n      data: newWord\n    };\n    setChartData(prevData => {\n      let newData = _objectSpread({}, prevData);\n\n      const newWordAlreadyInGraph = prevData.nodes.some(e => e.id === newNode.id);\n      if (!newWordAlreadyInGraph) newData.nodes.push(newNode);\n      let updatedLinks = []; // keep track of which previous inputs have already been updated\n\n      inputHistory.forEach((prevInput, ndx) => {\n        if ( // don't need to update yourself\n        prevInput.id !== newNode.id && // only update links once\n        !updatedLinks.includes(prevInput.id)) {\n          // look through the links and update weight with average if we find a match\n          newData.links = newData.links.map(e => {\n            if (e.source === prevInput.id && e.target === newNode.id || e.source === newNode.id && e.target === prevInput.id) {\n              e.weight = (e.weight + ndx) / 2;\n              updatedLinks.push(prevInput.id);\n            }\n\n            return e;\n          }); // if we didn't update this link (meaning it didn't exist), create a link\n\n          if (!updatedLinks.includes(prevInput.id)) {\n            newData.links.push({\n              source: prevInput.id,\n              target: newNode.id,\n              weight: ndx\n            });\n          }\n        }\n      });\n      return newData;\n    });\n    inputHistory.unshift(newNode);\n    setInputHistory(inputHistory);\n  }, [inputHistory, nodes.length]);\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"absolute m-2 text-gray-200\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }\n  }, __jsx(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 9\n    }\n  }, \"Show recent nodes\", __jsx(\"input\", {\n    className: \"mx-2\",\n    type: \"checkbox\",\n    value: showRecent,\n    onClick: toggleRecent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 11\n    }\n  })), showRecent && __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 11\n    }\n  }, __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 13\n    }\n  }, inputHistory.map((i, ndx) => __jsx(\"li\", {\n    key: i.id + ndx,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 17\n    }\n  }, i.data.transcription))))), __jsx(\"main\", {\n    ref: svgRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default InsightGraph;","map":{"version":3,"sources":["/Users/epleaner/workspace/insight-map/src/components/insightGraph/index.js"],"names":["useRef","useCallback","useState","useEffect","useMemo","scaleOrdinal","schemeTableau10","select","forceSimulation","forceManyBody","forceLink","forceCenter","forceX","forceY","InsightGraph","nodes","radius","maxHistory","width","height","showRecent","setShowRecent","toggleRecent","show","inputHistory","setInputHistory","chart","setChart","svgRef","chartData","setChartData","links","color","svg","current","append","style","attr","simulation","force","strength","id","d","distance","on","ticked","link","selectAll","circle","x","y","source","target","Object","assign","node","update","old","Map","data","map","get","join","text","weight","alpha","restart","remove","length","newWord","error","console","log","pop","newNode","transcription","prevData","newData","newWordAlreadyInGraph","some","e","push","updatedLinks","forEach","prevInput","ndx","includes","unshift","i"],"mappings":";;;;;;;;;;AAAA,SACEA,MADF,EAEEC,WAFF,EAGEC,QAHF,EAIEC,SAJF,EAKEC,OALF,QAMO,OANP;AAOA,SAASC,YAAT,QAA6B,UAA7B;AACA,SAASC,eAAT,QAAgC,oBAAhC;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,SACEC,eADF,EAEEC,aAFF,EAGEC,SAHF,EAIEC,WAJF,EAKEC,MALF,EAMEC,MANF,QAOO,UAPP;;AASA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AAClC,QAAMC,MAAM,GAAG,CAAf;AACA,QAAMC,UAAU,GAAG,CAAnB;AACA,QAAMC,KAAK,GAAG,GAAd;AACA,QAAMC,MAAM,GAAG,GAAf;AAEA,QAAM;AAAA,OAACC,UAAD;AAAA,OAAaC;AAAb,MAA8BnB,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAMoB,YAAY,GAAGrB,WAAW,CAAC,MAAMoB,aAAa,CAAEE,IAAD,IAAU,CAACA,IAAZ,CAApB,EAAuC,EAAvC,CAAhC;AAEA,QAAM;AAAA,OAACC,YAAD;AAAA,OAAeC;AAAf,MAAkCvB,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM;AAAA,OAACwB,KAAD;AAAA,OAAQC;AAAR,MAAoBzB,QAAQ,EAAlC;AACA,QAAM0B,MAAM,GAAG5B,MAAM,EAArB;AAEA,QAAM;AAAA,OAAC6B,SAAD;AAAA,OAAYC;AAAZ,MAA4B5B,QAAQ,CAAC;AACzCa,IAAAA,KAAK,EAAE,EADkC;AAEzCgB,IAAAA,KAAK,EAAE;AAFkC,GAAD,CAA1C;AAKA,QAAMC,KAAK,GAAG5B,OAAO,CAAC,MAAMC,YAAY,CAACC,eAAD,CAAnB,EAAsC,EAAtC,CAArB;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM8B,GAAG,GAAG1B,MAAM,CAACqB,MAAM,CAACM,OAAR,CAAN,CACTC,MADS,CACF,KADE,EAETC,KAFS,CAEH,OAFG,EAEM,OAFN,EAGTA,KAHS,CAGH,QAHG,EAGO,OAHP,EAITC,IAJS,CAIJ,SAJI,EAIO,CAAC,CAACnB,KAAD,GAAS,CAAV,EAAa,CAACC,MAAD,GAAU,CAAvB,EAA0BD,KAA1B,EAAiCC,MAAjC,CAJP,CAAZ;AAMA,UAAMmB,UAAU,GAAG9B,eAAe,GAC/B+B,KADgB,CACV,QADU,EACA9B,aAAa,GAAG+B,QAAhB,CAAyB,CAAC,IAA1B,CADA,EAEhBD,KAFgB,CAGf,MAHe,EAIf7B,SAAS,GACN+B,EADH,CACOC,CAAD,IAAOA,CAAC,CAACD,EADf,EAEGE,QAFH,CAEY,GAFZ,CAJe,EAQhBJ,KARgB,CAQV,QARU,EAQA5B,WAAW,EARX,EAShB4B,KATgB,CASV,GATU,EASL3B,MAAM,EATD,EAUhB2B,KAVgB,CAUV,GAVU,EAUL1B,MAAM,EAVD,EAWhB+B,EAXgB,CAWb,MAXa,EAWLC,MAXK,CAAnB;AAaA,QAAIC,IAAI,GAAGb,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBE,IAAhB,CAAqB,QAArB,EAA+B,MAA/B,EAAuCU,SAAvC,CAAiD,MAAjD,CAAX;AAEA,QAAIC,MAAM,GAAGf,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBY,SAAhB,CAA0B,GAA1B,CAAb;;AAEA,aAASF,MAAT,GAAkB;AAChBG,MAAAA,MAAM,CAACX,IAAP,CAAY,WAAZ,EAA0BK,CAAD,IAAQ,aAAYA,CAAC,CAACO,CAAE,KAAIP,CAAC,CAACQ,CAAE,GAAzD;AAEAJ,MAAAA,IAAI,CACDT,IADH,CACQ,IADR,EACeK,CAAD,IAAOA,CAAC,CAACS,MAAF,CAASF,CAD9B,EAEGZ,IAFH,CAEQ,IAFR,EAEeK,CAAD,IAAOA,CAAC,CAACS,MAAF,CAASD,CAF9B,EAGGb,IAHH,CAGQ,IAHR,EAGeK,CAAD,IAAOA,CAAC,CAACU,MAAF,CAASH,CAH9B,EAIGZ,IAJH,CAIQ,IAJR,EAIeK,CAAD,IAAOA,CAAC,CAACU,MAAF,CAASF,CAJ9B;AAKD;;AAEDvB,IAAAA,QAAQ,CACN0B,MAAM,CAACC,MAAP,CAAc/C,MAAM,CAACqB,MAAM,CAACM,OAAR,CAAN,CAAuBqB,IAAvB,EAAd,EAA6C;AAC3CC,MAAAA,MAAM,CAAC;AAAEzC,QAAAA,KAAF;AAASgB,QAAAA;AAAT,OAAD,EAAmB;AACvB;AACA;AACA,cAAM0B,GAAG,GAAG,IAAIC,GAAJ,CAAQV,MAAM,CAACW,IAAP,GAAcC,GAAd,CAAmBlB,CAAD,IAAO,CAACA,CAAC,CAACD,EAAH,EAAOC,CAAP,CAAzB,CAAR,CAAZ;AACA3B,QAAAA,KAAK,GAAGA,KAAK,CAAC6C,GAAN,CAAWlB,CAAD,IAAOW,MAAM,CAACC,MAAP,CAAcG,GAAG,CAACI,GAAJ,CAAQnB,CAAC,CAACD,EAAV,KAAiB,EAA/B,EAAmCC,CAAnC,CAAjB,CAAR;AACAX,QAAAA,KAAK,GAAGA,KAAK,CAAC6B,GAAN,CAAWlB,CAAD,IAAOW,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBZ,CAAlB,CAAjB,CAAR;AAEAM,QAAAA,MAAM,GAAGA,MAAM,CACZW,IADM,CACD5C,KADC,EACO2B,CAAD,IAAOA,CAAC,CAACD,EADf,EAENqB,IAFM,CAED,GAFC,EAGNzB,IAHM,CAGD,MAHC,EAGQK,CAAD,IAAOA,CAAC,CAACiB,IAHhB,CAAT;AAKAX,QAAAA,MAAM,CACHb,MADH,CACU,QADV,EAEGE,IAFH,CAEQ,GAFR,EAEa,CAFb,EAGGA,IAHH,CAGQ,QAHR,EAGkB,MAHlB,EAIGA,IAJH,CAIQ,cAJR,EAIwB,GAJxB,EAKGA,IALH,CAKQ,MALR,EAKiBK,CAAD,IAAOV,KAAK,CAACU,CAAC,CAACD,EAAH,CAL5B;AAOAO,QAAAA,MAAM,CACHb,MADH,CACU,MADV,EAEG4B,IAFH,CAESrB,CAAD,IAAOA,CAAC,CAACD,EAFjB,EAGGJ,IAHH,CAGQ,MAHR,EAGiBK,CAAD,IAAOV,KAAK,CAACU,CAAC,CAACD,EAAH,CAH5B,EAIGJ,IAJH,CAIQ,IAJR,EAIcrB,MAAM,GAAG,CAJvB,EAKGqB,IALH,CAKQ,WALR,EAKqB,MALrB,EAMGA,IANH,CAMQ,aANR,EAMuB,QANvB;AAQAS,QAAAA,IAAI,GAAGA,IAAI,CACRa,IADI,CACC5B,KADD,EACSW,CAAD,IAAO,CAACA,CAAC,CAACS,MAAH,EAAWT,CAAC,CAACU,MAAb,CADf,EAEJU,IAFI,CAEC,MAFD,EAGJzB,IAHI,CAGC,SAHD,EAGaK,CAAD,IAAO,IAAIA,CAAC,CAACsB,MAAF,GAAW/C,UAHlC,CAAP;AAKAqB,QAAAA,UAAU,CAACvB,KAAX,CAAiBA,KAAjB;AACAuB,QAAAA,UAAU,CAACC,KAAX,CAAiB,MAAjB,EAAyBR,KAAzB,CAA+BA,KAA/B;AACAO,QAAAA,UAAU,CAAC2B,KAAX,CAAiB,CAAjB,EAAoBC,OAApB;AACD;;AApC0C,KAA7C,CADM,CAAR;AAyCA,WAAO,MAAM;AACX3D,MAAAA,MAAM,CAAC0B,GAAD,CAAN,CAAYkC,MAAZ;AACD,KAFD;AAGD,GA9EQ,EA8EN,CAACnC,KAAD,CA9EM,CAAT;AAgFA7B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIuB,KAAJ,EAAW;AACTA,MAAAA,KAAK,CAAC8B,MAAN,CAAa3B,SAAb;AACD;AACF,GAJQ,EAIN,CAACH,KAAD,EAAQG,SAAS,CAACd,KAAV,CAAgBqD,MAAxB,EAAgCvC,SAAS,CAACE,KAAV,CAAgBqC,MAAhD,CAJM,CAAT;AAMAjE,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIY,KAAK,CAACqD,MAAN,KAAiB,CAArB,EAAwB;AAExB,UAAMC,OAAO,GAAGtD,KAAK,CAACA,KAAK,CAACqD,MAAN,GAAe,CAAhB,CAArB;AAEA,QAAIC,OAAO,CAACC,KAAZ,EAAmB;AAEnBC,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CH,OAA1C;AAEA,QAAI7C,YAAY,CAAC4C,MAAb,KAAwBnD,UAA5B,EAAwCO,YAAY,CAACiD,GAAb;AAExC,UAAMC,OAAO,GAAG;AAAEjC,MAAAA,EAAE,EAAE4B,OAAO,CAACM,aAAd;AAA6BhB,MAAAA,IAAI,EAAEU;AAAnC,KAAhB;AAEAvC,IAAAA,YAAY,CAAE8C,QAAD,IAAc;AACzB,UAAIC,OAAO,qBAAQD,QAAR,CAAX;;AAEA,YAAME,qBAAqB,GAAGF,QAAQ,CAAC7D,KAAT,CAAegE,IAAf,CAC3BC,CAAD,IAAOA,CAAC,CAACvC,EAAF,KAASiC,OAAO,CAACjC,EADI,CAA9B;AAIA,UAAI,CAACqC,qBAAL,EAA4BD,OAAO,CAAC9D,KAAR,CAAckE,IAAd,CAAmBP,OAAnB;AAE5B,UAAIQ,YAAY,GAAG,EAAnB,CATyB,CASF;;AAEvB1D,MAAAA,YAAY,CAAC2D,OAAb,CAAqB,CAACC,SAAD,EAAYC,GAAZ,KAAoB;AACvC,aACE;AACAD,QAAAA,SAAS,CAAC3C,EAAV,KAAiBiC,OAAO,CAACjC,EAAzB,IACA;AACA,SAACyC,YAAY,CAACI,QAAb,CAAsBF,SAAS,CAAC3C,EAAhC,CAJH,EAKE;AACA;AACAoC,UAAAA,OAAO,CAAC9C,KAAR,GAAgB8C,OAAO,CAAC9C,KAAR,CAAc6B,GAAd,CAAmBoB,CAAD,IAAO;AACvC,gBACGA,CAAC,CAAC7B,MAAF,KAAaiC,SAAS,CAAC3C,EAAvB,IAA6BuC,CAAC,CAAC5B,MAAF,KAAasB,OAAO,CAACjC,EAAnD,IACCuC,CAAC,CAAC7B,MAAF,KAAauB,OAAO,CAACjC,EAArB,IAA2BuC,CAAC,CAAC5B,MAAF,KAAagC,SAAS,CAAC3C,EAFrD,EAGE;AACAuC,cAAAA,CAAC,CAAChB,MAAF,GAAW,CAACgB,CAAC,CAAChB,MAAF,GAAWqB,GAAZ,IAAmB,CAA9B;AACAH,cAAAA,YAAY,CAACD,IAAb,CAAkBG,SAAS,CAAC3C,EAA5B;AACD;;AAED,mBAAOuC,CAAP;AACD,WAVe,CAAhB,CAFA,CAcA;;AACA,cAAI,CAACE,YAAY,CAACI,QAAb,CAAsBF,SAAS,CAAC3C,EAAhC,CAAL,EAA0C;AACxCoC,YAAAA,OAAO,CAAC9C,KAAR,CAAckD,IAAd,CAAmB;AACjB9B,cAAAA,MAAM,EAAEiC,SAAS,CAAC3C,EADD;AAEjBW,cAAAA,MAAM,EAAEsB,OAAO,CAACjC,EAFC;AAGjBuB,cAAAA,MAAM,EAAEqB;AAHS,aAAnB;AAKD;AACF;AACF,OA7BD;AA+BA,aAAOR,OAAP;AACD,KA3CW,CAAZ;AA6CArD,IAAAA,YAAY,CAAC+D,OAAb,CAAqBb,OAArB;AACAjD,IAAAA,eAAe,CAACD,YAAD,CAAf;AACD,GA5DQ,EA4DN,CAACA,YAAD,EAAeT,KAAK,CAACqD,MAArB,CA5DM,CAAT;AA8DA,SACE,4BACE;AAAK,IAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAEE;AACE,IAAA,SAAS,EAAC,MADZ;AAEE,IAAA,IAAI,EAAC,UAFP;AAGE,IAAA,KAAK,EAAEhD,UAHT;AAIE,IAAA,OAAO,EAAEE,YAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,EAUGF,UAAU,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGI,YAAY,CAACoC,GAAb,CAAiB,CAAC4B,CAAD,EAAIH,GAAJ,KAChB;AAAI,IAAA,GAAG,EAAEG,CAAC,CAAC/C,EAAF,GAAO4C,GAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsBG,CAAC,CAAC7B,IAAF,CAAOgB,aAA7B,CADD,CADH,CADF,CAXJ,CADF,EAqBE;AAAM,IAAA,GAAG,EAAE/C,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IArBF,CADF;AAyBD,CAjMD;;AAmMA,eAAed,YAAf","sourcesContent":["import {\n  useRef,\n  useCallback,\n  useState,\n  useEffect,\n  useMemo,\n} from 'react';\nimport { scaleOrdinal } from 'd3-scale';\nimport { schemeTableau10 } from 'd3-scale-chromatic';\nimport { select } from 'd3-selection';\nimport {\n  forceSimulation,\n  forceManyBody,\n  forceLink,\n  forceCenter,\n  forceX,\n  forceY,\n} from 'd3-force';\n\nconst InsightGraph = ({ nodes }) => {\n  const radius = 8;\n  const maxHistory = 5;\n  const width = 600;\n  const height = 400;\n\n  const [showRecent, setShowRecent] = useState(false);\n  const toggleRecent = useCallback(() => setShowRecent((show) => !show), []);\n\n  const [inputHistory, setInputHistory] = useState([]);\n  const [chart, setChart] = useState();\n  const svgRef = useRef();\n\n  const [chartData, setChartData] = useState({\n    nodes: [],\n    links: [],\n  });\n\n  const color = useMemo(() => scaleOrdinal(schemeTableau10), []);\n\n  useEffect(() => {\n    const svg = select(svgRef.current)\n      .append('svg')\n      .style('width', '100vw')\n      .style('height', '100vh')\n      .attr('viewBox', [-width / 2, -height / 2, width, height]);\n\n    const simulation = forceSimulation()\n      .force('charge', forceManyBody().strength(-1000))\n      .force(\n        'link',\n        forceLink()\n          .id((d) => d.id)\n          .distance(100)\n      )\n      .force('center', forceCenter())\n      .force('x', forceX())\n      .force('y', forceY())\n      .on('tick', ticked);\n\n    let link = svg.append('g').attr('stroke', '#000').selectAll('line');\n\n    let circle = svg.append('g').selectAll('g');\n\n    function ticked() {\n      circle.attr('transform', (d) => `translate(${d.x}, ${d.y})`);\n\n      link\n        .attr('x1', (d) => d.source.x)\n        .attr('y1', (d) => d.source.y)\n        .attr('x2', (d) => d.target.x)\n        .attr('y2', (d) => d.target.y);\n    }\n\n    setChart(\n      Object.assign(select(svgRef.current).node(), {\n        update({ nodes, links }) {\n          // Make a shallow copy to protect against mutation, while\n          // recycling old nodes to preserve position and velocity.\n          const old = new Map(circle.data().map((d) => [d.id, d]));\n          nodes = nodes.map((d) => Object.assign(old.get(d.id) || {}, d));\n          links = links.map((d) => Object.assign({}, d));\n\n          circle = circle\n            .data(nodes, (d) => d.id)\n            .join('g')\n            .attr('data', (d) => d.data);\n\n          circle\n            .append('circle')\n            .attr('r', 8)\n            .attr('stroke', '#fff')\n            .attr('stroke-width', 1.5)\n            .attr('fill', (d) => color(d.id));\n\n          circle\n            .append('text')\n            .text((d) => d.id)\n            .attr('fill', (d) => color(d.id))\n            .attr('dy', radius * 3)\n            .attr('font-size', '1rem')\n            .attr('text-anchor', 'middle');\n\n          link = link\n            .data(links, (d) => [d.source, d.target])\n            .join('line')\n            .attr('opacity', (d) => 1 - d.weight / maxHistory);\n\n          simulation.nodes(nodes);\n          simulation.force('link').links(links);\n          simulation.alpha(1).restart();\n        },\n      })\n    );\n\n    return () => {\n      select(svg).remove();\n    };\n  }, [color]);\n\n  useEffect(() => {\n    if (chart) {\n      chart.update(chartData);\n    }\n  }, [chart, chartData.nodes.length, chartData.links.length]);\n\n  useEffect(() => {\n    if (nodes.length === 0) return;\n\n    const newWord = nodes[nodes.length - 1];\n\n    if (newWord.error) return;\n\n    console.log('in graph effect, new word:', newWord);\n\n    if (inputHistory.length === maxHistory) inputHistory.pop();\n\n    const newNode = { id: newWord.transcription, data: newWord };\n\n    setChartData((prevData) => {\n      let newData = { ...prevData };\n\n      const newWordAlreadyInGraph = prevData.nodes.some(\n        (e) => e.id === newNode.id\n      );\n\n      if (!newWordAlreadyInGraph) newData.nodes.push(newNode);\n\n      let updatedLinks = []; // keep track of which previous inputs have already been updated\n\n      inputHistory.forEach((prevInput, ndx) => {\n        if (\n          // don't need to update yourself\n          prevInput.id !== newNode.id &&\n          // only update links once\n          !updatedLinks.includes(prevInput.id)\n        ) {\n          // look through the links and update weight with average if we find a match\n          newData.links = newData.links.map((e) => {\n            if (\n              (e.source === prevInput.id && e.target === newNode.id) ||\n              (e.source === newNode.id && e.target === prevInput.id)\n            ) {\n              e.weight = (e.weight + ndx) / 2;\n              updatedLinks.push(prevInput.id);\n            }\n\n            return e;\n          });\n\n          // if we didn't update this link (meaning it didn't exist), create a link\n          if (!updatedLinks.includes(prevInput.id)) {\n            newData.links.push({\n              source: prevInput.id,\n              target: newNode.id,\n              weight: ndx,\n            });\n          }\n        }\n      });\n\n      return newData;\n    });\n\n    inputHistory.unshift(newNode);\n    setInputHistory(inputHistory);\n  }, [inputHistory, nodes.length]);\n\n  return (\n    <>\n      <div className='absolute m-2 text-gray-200'>\n        <label>\n          Show recent nodes\n          <input\n            className='mx-2'\n            type='checkbox'\n            value={showRecent}\n            onClick={toggleRecent}\n          />\n        </label>\n        {showRecent && (\n          <div>\n            <ul>\n              {inputHistory.map((i, ndx) => (\n                <li key={i.id + ndx}>{i.data.transcription}</li>\n              ))}\n            </ul>\n          </div>\n        )}\n      </div>\n      <main ref={svgRef}></main>\n    </>\n  );\n};\n\nexport default InsightGraph;\n"]},"metadata":{},"sourceType":"module"}