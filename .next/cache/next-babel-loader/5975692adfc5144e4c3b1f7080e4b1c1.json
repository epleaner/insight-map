{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _Map from \"@babel/runtime-corejs2/core-js/map\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/epleaner/workspace/insight-map/src/components/insightGraph/index.js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useRef, useCallback, useState, useEffect, useMemo } from 'react';\nimport { scaleOrdinal } from 'd3-scale';\nimport { schemeTableau10 } from 'd3-scale-chromatic';\nimport { select } from 'd3-selection';\nimport { forceSimulation, forceManyBody, forceLink, forceCenter, forceX, forceY } from 'd3-force';\n\nvar InsightGraph = function InsightGraph(_ref) {\n  var nodes = _ref.nodes;\n  var radius = 8;\n  var maxHistory = 5;\n  var width = 600;\n  var height = 400;\n\n  var _useState = useState(false),\n      showRecent = _useState[0],\n      setShowRecent = _useState[1];\n\n  var toggleRecent = useCallback(function () {\n    return setShowRecent(function (show) {\n      return !show;\n    });\n  }, []);\n\n  var _useState2 = useState([]),\n      inputHistory = _useState2[0],\n      setInputHistory = _useState2[1];\n\n  var _useState3 = useState(),\n      chart = _useState3[0],\n      setChart = _useState3[1];\n\n  var svgRef = useRef();\n\n  var _useState4 = useState({\n    nodes: [],\n    links: []\n  }),\n      chartData = _useState4[0],\n      setChartData = _useState4[1];\n\n  var color = useMemo(function () {\n    return scaleOrdinal(schemeTableau10);\n  }, []);\n  useEffect(function () {\n    var svg = select(svgRef.current).append('svg').style('width', '100vw').style('height', '100vh').attr('viewBox', [-width / 2, -height / 2, width, height]);\n    var simulation = forceSimulation().force('charge', forceManyBody().strength(-1000)).force('link', forceLink().id(function (d) {\n      return d.id;\n    }).distance(100)).force('center', forceCenter()).force('x', forceX()).force('y', forceY()).on('tick', ticked);\n    var link = svg.append('g').attr('stroke', '#000').selectAll('line');\n    var circle = svg.append('g').selectAll('g');\n\n    function ticked() {\n      circle.attr('transform', function (d) {\n        return \"translate(\".concat(d.x, \", \").concat(d.y, \")\");\n      });\n      link.attr('x1', function (d) {\n        return d.source.x;\n      }).attr('y1', function (d) {\n        return d.source.y;\n      }).attr('x2', function (d) {\n        return d.target.x;\n      }).attr('y2', function (d) {\n        return d.target.y;\n      });\n    }\n\n    setChart(_Object$assign(select(svgRef.current).node(), {\n      update: function update(_ref2) {\n        var nodes = _ref2.nodes,\n            links = _ref2.links;\n        // Make a shallow copy to protect against mutation, while\n        // recycling old nodes to preserve position and velocity.\n        var old = new _Map(circle.data().map(function (d) {\n          return [d.id, d];\n        }));\n        nodes = nodes.map(function (d) {\n          return _Object$assign(old.get(d.id) || {}, d);\n        });\n        links = links.map(function (d) {\n          return _Object$assign({}, d);\n        });\n        circle = circle.data(nodes, function (d) {\n          return d.id;\n        }).join('g').attr('data', function (d) {\n          return d.data;\n        });\n        circle.append('circle').attr('r', 8).attr('stroke', '#fff').attr('stroke-width', 1.5).attr('fill', function (d) {\n          return color(d.id);\n        });\n        circle.append('text').text(function (d) {\n          return d.id;\n        }).attr('fill', function (d) {\n          return color(d.id);\n        }).attr('dy', radius * 3).attr('font-size', '1rem').attr('text-anchor', 'middle');\n        link = link.data(links, function (d) {\n          return [d.source, d.target];\n        }).join('line').attr('opacity', function (d) {\n          return 1 - d.weight / maxHistory;\n        });\n        simulation.nodes(nodes);\n        simulation.force('link').links(links);\n        simulation.alpha(1).restart();\n      }\n    }));\n    return function () {\n      select(svg).remove();\n    };\n  }, [color]);\n  useEffect(function () {\n    if (chart) {\n      chart.update(chartData);\n    }\n  }, [chart, chartData.nodes.length, chartData.links.length]);\n  useEffect(function () {\n    if (nodes.length === 0) return;\n    var newWord = nodes[nodes.length - 1];\n    if (newWord.error) return;\n    console.log('in graph effect, new word:', newWord);\n    if (inputHistory.length === maxHistory) inputHistory.pop();\n    var newNode = {\n      id: newWord.transcription,\n      data: newWord\n    };\n    setChartData(function (prevData) {\n      var newData = _objectSpread({}, prevData);\n\n      var newWordAlreadyInGraph = prevData.nodes.some(function (e) {\n        return e.id === newNode.id;\n      });\n      if (!newWordAlreadyInGraph) newData.nodes.push(newNode);\n      var updatedLinks = []; // keep track of which previous inputs have already been updated\n\n      inputHistory.forEach(function (prevInput, ndx) {\n        if ( // don't need to update yourself\n        prevInput.id !== newNode.id && // only update links once\n        !updatedLinks.includes(prevInput.id)) {\n          // look through the links and update weight with average if we find a match\n          newData.links = newData.links.map(function (e) {\n            if (e.source === prevInput.id && e.target === newNode.id || e.source === newNode.id && e.target === prevInput.id) {\n              e.weight = (e.weight + ndx) / 2;\n              updatedLinks.push(prevInput.id);\n            }\n\n            return e;\n          }); // if we didn't update this link (meaning it didn't exist), create a link\n\n          if (!updatedLinks.includes(prevInput.id)) {\n            newData.links.push({\n              source: prevInput.id,\n              target: newNode.id,\n              weight: ndx\n            });\n          }\n        }\n      });\n      return newData;\n    });\n    inputHistory.unshift(newNode);\n    setInputHistory(inputHistory);\n  }, [inputHistory, nodes.length]);\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"absolute m-2 text-gray-200\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }\n  }, __jsx(\"label\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 9\n    }\n  }, \"Show recent nodes\", __jsx(\"input\", {\n    className: \"mx-2\",\n    type: \"checkbox\",\n    value: showRecent,\n    onClick: toggleRecent,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 11\n    }\n  })), showRecent && __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 11\n    }\n  }, __jsx(\"ul\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 13\n    }\n  }, inputHistory.map(function (i, ndx) {\n    return __jsx(\"li\", {\n      key: i.id + ndx,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 17\n      }\n    }, i.data.transcription);\n  })))), __jsx(\"main\", {\n    ref: svgRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default InsightGraph;","map":{"version":3,"sources":["/Users/epleaner/workspace/insight-map/src/components/insightGraph/index.js"],"names":["useRef","useCallback","useState","useEffect","useMemo","scaleOrdinal","schemeTableau10","select","forceSimulation","forceManyBody","forceLink","forceCenter","forceX","forceY","InsightGraph","nodes","radius","maxHistory","width","height","showRecent","setShowRecent","toggleRecent","show","inputHistory","setInputHistory","chart","setChart","svgRef","links","chartData","setChartData","color","svg","current","append","style","attr","simulation","force","strength","id","d","distance","on","ticked","link","selectAll","circle","x","y","source","target","node","update","old","data","map","get","join","text","weight","alpha","restart","remove","length","newWord","error","console","log","pop","newNode","transcription","prevData","newData","newWordAlreadyInGraph","some","e","push","updatedLinks","forEach","prevInput","ndx","includes","unshift","i"],"mappings":"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","sourcesContent":["import {\n  useRef,\n  useCallback,\n  useState,\n  useEffect,\n  useMemo,\n} from 'react';\nimport { scaleOrdinal } from 'd3-scale';\nimport { schemeTableau10 } from 'd3-scale-chromatic';\nimport { select } from 'd3-selection';\nimport {\n  forceSimulation,\n  forceManyBody,\n  forceLink,\n  forceCenter,\n  forceX,\n  forceY,\n} from 'd3-force';\n\nconst InsightGraph = ({ nodes }) => {\n  const radius = 8;\n  const maxHistory = 5;\n  const width = 600;\n  const height = 400;\n\n  const [showRecent, setShowRecent] = useState(false);\n  const toggleRecent = useCallback(() => setShowRecent((show) => !show), []);\n\n  const [inputHistory, setInputHistory] = useState([]);\n  const [chart, setChart] = useState();\n  const svgRef = useRef();\n\n  const [chartData, setChartData] = useState({\n    nodes: [],\n    links: [],\n  });\n\n  const color = useMemo(() => scaleOrdinal(schemeTableau10), []);\n\n  useEffect(() => {\n    const svg = select(svgRef.current)\n      .append('svg')\n      .style('width', '100vw')\n      .style('height', '100vh')\n      .attr('viewBox', [-width / 2, -height / 2, width, height]);\n\n    const simulation = forceSimulation()\n      .force('charge', forceManyBody().strength(-1000))\n      .force(\n        'link',\n        forceLink()\n          .id((d) => d.id)\n          .distance(100)\n      )\n      .force('center', forceCenter())\n      .force('x', forceX())\n      .force('y', forceY())\n      .on('tick', ticked);\n\n    let link = svg.append('g').attr('stroke', '#000').selectAll('line');\n\n    let circle = svg.append('g').selectAll('g');\n\n    function ticked() {\n      circle.attr('transform', (d) => `translate(${d.x}, ${d.y})`);\n\n      link\n        .attr('x1', (d) => d.source.x)\n        .attr('y1', (d) => d.source.y)\n        .attr('x2', (d) => d.target.x)\n        .attr('y2', (d) => d.target.y);\n    }\n\n    setChart(\n      Object.assign(select(svgRef.current).node(), {\n        update({ nodes, links }) {\n          // Make a shallow copy to protect against mutation, while\n          // recycling old nodes to preserve position and velocity.\n          const old = new Map(circle.data().map((d) => [d.id, d]));\n          nodes = nodes.map((d) => Object.assign(old.get(d.id) || {}, d));\n          links = links.map((d) => Object.assign({}, d));\n\n          circle = circle\n            .data(nodes, (d) => d.id)\n            .join('g')\n            .attr('data', (d) => d.data);\n\n          circle\n            .append('circle')\n            .attr('r', 8)\n            .attr('stroke', '#fff')\n            .attr('stroke-width', 1.5)\n            .attr('fill', (d) => color(d.id));\n\n          circle\n            .append('text')\n            .text((d) => d.id)\n            .attr('fill', (d) => color(d.id))\n            .attr('dy', radius * 3)\n            .attr('font-size', '1rem')\n            .attr('text-anchor', 'middle');\n\n          link = link\n            .data(links, (d) => [d.source, d.target])\n            .join('line')\n            .attr('opacity', (d) => 1 - d.weight / maxHistory);\n\n          simulation.nodes(nodes);\n          simulation.force('link').links(links);\n          simulation.alpha(1).restart();\n        },\n      })\n    );\n\n    return () => {\n      select(svg).remove();\n    };\n  }, [color]);\n\n  useEffect(() => {\n    if (chart) {\n      chart.update(chartData);\n    }\n  }, [chart, chartData.nodes.length, chartData.links.length]);\n\n  useEffect(() => {\n    if (nodes.length === 0) return;\n\n    const newWord = nodes[nodes.length - 1];\n\n    if (newWord.error) return;\n\n    console.log('in graph effect, new word:', newWord);\n\n    if (inputHistory.length === maxHistory) inputHistory.pop();\n\n    const newNode = { id: newWord.transcription, data: newWord };\n\n    setChartData((prevData) => {\n      let newData = { ...prevData };\n\n      const newWordAlreadyInGraph = prevData.nodes.some(\n        (e) => e.id === newNode.id\n      );\n\n      if (!newWordAlreadyInGraph) newData.nodes.push(newNode);\n\n      let updatedLinks = []; // keep track of which previous inputs have already been updated\n\n      inputHistory.forEach((prevInput, ndx) => {\n        if (\n          // don't need to update yourself\n          prevInput.id !== newNode.id &&\n          // only update links once\n          !updatedLinks.includes(prevInput.id)\n        ) {\n          // look through the links and update weight with average if we find a match\n          newData.links = newData.links.map((e) => {\n            if (\n              (e.source === prevInput.id && e.target === newNode.id) ||\n              (e.source === newNode.id && e.target === prevInput.id)\n            ) {\n              e.weight = (e.weight + ndx) / 2;\n              updatedLinks.push(prevInput.id);\n            }\n\n            return e;\n          });\n\n          // if we didn't update this link (meaning it didn't exist), create a link\n          if (!updatedLinks.includes(prevInput.id)) {\n            newData.links.push({\n              source: prevInput.id,\n              target: newNode.id,\n              weight: ndx,\n            });\n          }\n        }\n      });\n\n      return newData;\n    });\n\n    inputHistory.unshift(newNode);\n    setInputHistory(inputHistory);\n  }, [inputHistory, nodes.length]);\n\n  return (\n    <>\n      <div className='absolute m-2 text-gray-200'>\n        <label>\n          Show recent nodes\n          <input\n            className='mx-2'\n            type='checkbox'\n            value={showRecent}\n            onClick={toggleRecent}\n          />\n        </label>\n        {showRecent && (\n          <div>\n            <ul>\n              {inputHistory.map((i, ndx) => (\n                <li key={i.id + ndx}>{i.data.transcription}</li>\n              ))}\n            </ul>\n          </div>\n        )}\n      </div>\n      <main ref={svgRef}></main>\n    </>\n  );\n};\n\nexport default InsightGraph;\n"]},"metadata":{},"sourceType":"module"}