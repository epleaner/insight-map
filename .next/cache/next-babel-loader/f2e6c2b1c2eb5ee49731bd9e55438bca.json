{"ast":null,"code":"var _jsxFileName = \"/Users/epleaner/workspace/insight-map/src/components/insightGraph/webSocketListener.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nconst SOCKET_STATUS = {\n  '0': 'Attempting to connect...',\n  '1': 'Open',\n  '2': 'Closing',\n  '3': 'Closed'\n};\n\nconst WebSocketListener = ({\n  onMessage\n}) => {\n  const {\n    0: socket,\n    1: setSocket\n  } = useState(null);\n  const {\n    0: socketState,\n    1: setSocketState\n  } = useState('disconnected');\n  useEffect(() => {\n    const connectToWebSocket = () => {\n      // Create WebSocket connection.\n      const socket = new WebSocket('ws://localhost:5678');\n\n      socket.onopen = event => {\n        setSocketState('connected');\n      };\n\n      socket.onmessage = event => {\n        console.log('Message from server ', event.data);\n        onMessage(JSON.parse(event.data));\n      };\n\n      socket.onclose = event => {\n        console.log('Connection closed');\n        setSocketState('disconnected');\n        setTimeout(() => connectToWebSocket(), 1000);\n      };\n\n      socket.onerror = error => {\n        console.log('Error', error);\n        setSocketState('error');\n      };\n\n      setSocket(socket);\n    };\n\n    connectToWebSocket();\n    return () => socket && socket.close();\n  }, []);\n  return __jsx(\"div\", {\n    className: \"absolute right-0 m-2 text-gray-200\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, \"Socket:\", ' ', __jsx(\"span\", {\n    className: socketState === 'connected' ? 'text-green-400' : 'text-red-400',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, socket && SOCKET_STATUS[socket.readyState]));\n};\n\nWebSocketListener.propTypes = {\n  onMessage: PropTypes.func.isRequired\n};\nexport default WebSocketListener;","map":{"version":3,"sources":["/Users/epleaner/workspace/insight-map/src/components/insightGraph/webSocketListener.js"],"names":["useState","useEffect","PropTypes","SOCKET_STATUS","WebSocketListener","onMessage","socket","setSocket","socketState","setSocketState","connectToWebSocket","WebSocket","onopen","event","onmessage","console","log","data","JSON","parse","onclose","setTimeout","onerror","error","close","readyState","propTypes","func","isRequired"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,MAAMC,aAAa,GAAG;AACpB,OAAK,0BADe;AAEpB,OAAK,MAFe;AAGpB,OAAK,SAHe;AAIpB,OAAK;AAJe,CAAtB;;AAOA,MAAMC,iBAAiB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAmB;AAC3C,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBP,QAAQ,CAAC,IAAD,CAApC;AACA,QAAM;AAAA,OAACQ,WAAD;AAAA,OAAcC;AAAd,MAAgCT,QAAQ,CAAC,cAAD,CAA9C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,kBAAkB,GAAG,MAAM;AAC/B;AACA,YAAMJ,MAAM,GAAG,IAAIK,SAAJ,CAAc,qBAAd,CAAf;;AAEAL,MAAAA,MAAM,CAACM,MAAP,GAAiBC,KAAD,IAAW;AACzBJ,QAAAA,cAAc,CAAC,WAAD,CAAd;AACD,OAFD;;AAIAH,MAAAA,MAAM,CAACQ,SAAP,GAAoBD,KAAD,IAAW;AAC5BE,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCH,KAAK,CAACI,IAA1C;AACAZ,QAAAA,SAAS,CAACa,IAAI,CAACC,KAAL,CAAWN,KAAK,CAACI,IAAjB,CAAD,CAAT;AACD,OAHD;;AAKAX,MAAAA,MAAM,CAACc,OAAP,GAAkBP,KAAD,IAAW;AAC1BE,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAP,QAAAA,cAAc,CAAC,cAAD,CAAd;AACAY,QAAAA,UAAU,CAAC,MAAMX,kBAAkB,EAAzB,EAA6B,IAA7B,CAAV;AACD,OAJD;;AAMAJ,MAAAA,MAAM,CAACgB,OAAP,GAAkBC,KAAD,IAAW;AAC1BR,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBO,KAArB;AACAd,QAAAA,cAAc,CAAC,OAAD,CAAd;AACD,OAHD;;AAKAF,MAAAA,SAAS,CAACD,MAAD,CAAT;AACD,KAzBD;;AA2BAI,IAAAA,kBAAkB;AAElB,WAAO,MAAMJ,MAAM,IAAIA,MAAM,CAACkB,KAAP,EAAvB;AACD,GA/BQ,EA+BN,EA/BM,CAAT;AAiCA,SACE;AAAK,IAAA,SAAS,EAAC,oCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACU,GADV,EAEE;AACE,IAAA,SAAS,EACPhB,WAAW,KAAK,WAAhB,GAA8B,gBAA9B,GAAiD,cAFrD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIGF,MAAM,IAAIH,aAAa,CAACG,MAAM,CAACmB,UAAR,CAJ1B,CAFF,CADF;AAWD,CAhDD;;AAkDArB,iBAAiB,CAACsB,SAAlB,GAA8B;AAC5BrB,EAAAA,SAAS,EAAEH,SAAS,CAACyB,IAAV,CAAeC;AADE,CAA9B;AAIA,eAAexB,iBAAf","sourcesContent":["import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nconst SOCKET_STATUS = {\n  '0': 'Attempting to connect...',\n  '1': 'Open',\n  '2': 'Closing',\n  '3': 'Closed',\n};\n\nconst WebSocketListener = ({ onMessage }) => {\n  const [socket, setSocket] = useState(null);\n  const [socketState, setSocketState] = useState('disconnected');\n\n  useEffect(() => {\n    const connectToWebSocket = () => {\n      // Create WebSocket connection.\n      const socket = new WebSocket('ws://localhost:5678');\n\n      socket.onopen = (event) => {\n        setSocketState('connected');\n      };\n\n      socket.onmessage = (event) => {\n        console.log('Message from server ', event.data);\n        onMessage(JSON.parse(event.data));\n      };\n\n      socket.onclose = (event) => {\n        console.log('Connection closed');\n        setSocketState('disconnected');\n        setTimeout(() => connectToWebSocket(), 1000);\n      };\n\n      socket.onerror = (error) => {\n        console.log('Error', error);\n        setSocketState('error');\n      };\n\n      setSocket(socket);\n    };\n\n    connectToWebSocket();\n\n    return () => socket && socket.close();\n  }, []);\n\n  return (\n    <div className='absolute right-0 m-2 text-gray-200'>\n      Socket:{' '}\n      <span\n        className={\n          socketState === 'connected' ? 'text-green-400' : 'text-red-400'\n        }>\n        {socket && SOCKET_STATUS[socket.readyState]}\n      </span>\n    </div>\n  );\n};\n\nWebSocketListener.propTypes = {\n  onMessage: PropTypes.func.isRequired,\n};\n\nexport default WebSocketListener;\n"]},"metadata":{},"sourceType":"module"}